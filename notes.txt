https://adventofcode.com/

Day 1:
    - Started 2024-12-1 7:16pm
    - part1: 2024-12-1 7:26pm [2176849, 1.5797ms] (105675)
    - part2: 2024-12-1 7:33pm [23384288, 1.316ms] (99600)

Day 2:
    - Start 2024-12-1 9:00pm
    - part1: 2024-12-1 9:56pm [670, 1.483ms] (13603)
    - part2: 2024-12-1 10:22pm [700, 2.2705ms] (10479)

Day 3:
    - Start 2024-12-3 8:47am
    - part1: 2024-12-3 10:38pm [189600467, 531.7us] (102755)
    - part2: 2024-12-6 9:05am [107069718, 833.6us] (116460)

Day 4:
    - Start 2024-12-5 11pm ish
    - part1: 2024-12-6 12:16am [2551, 28.897ms] (94175)
    - part2: 2024-12-6 8:07am [1985, 1.983ms] (88902)

Day 5:
    - Start 2024-12-6 7:55pm
    - part1: 2024-12-6 8:58pm [7307, 11.114ms] (81540)
    - part2: 2024-12-10 5:52pm [4713, 16.985m] (86749)

Day 6:
    - Start 2024-12-10 5:58pm
    - part1: 2024-12-10 6:57pm [5239, 4.843ms] (85723)
    - part2: 2024-12-10 7:26pm [1753, 609.704ms] (63821), Changed the algorithm to improve performance, but it's
      still quite slow. Used the tortoise and hare cycle detection algorithm to further improve the runtime.

Day 7:
    - Start 2024-12-10 7:56pm
    - part1: 2024-12-10 8:35pm [20281182715321, 2.699ms] (68760)
    - part2: 2024-12-10 8:59pm [159490400628354, 2.503ms] (65510), Used a flamegraph to find a bottleneck and
      made improvements. Rewrote the algorithm and shared it with part 1 for even more improvements.

Day 8:
    - Start 2024-12-13 7:24pm
    - part1: 2024-12-13 8:34pm [222, 362.3us] (63227)
    - part2: 2024-12-13 9:05pm [884, 898.4us] (60754)

Day 9:
    - Start 2024-12-15 12:11pm
    - part1: 2024-12-15 2:01pm [6356833654075, 3.47ms] (62857)
    - part2: 2024-12-25 10:50pm [6389911791746, 189ms] (58995)

Day 10:
    - Start 2024-12-22 2:05pm
    - part1: 2024-12-22 3:03pm [698, 6.86ms] (60235)
    - part2: 2024-12-22 3:11pm [1436, 2.88ms] (58952)

Day 11:
    - Start 2024-12-22 3:18pm
    - part1: 2024-12-22 3:35pm [203457, 16.076ms] (62720)
    - part2: 2024-12-22 7:37pm [241394363462435, 139.93ms] (54136)
    - Made improvements to part 2 to not use recursion after reading on reddit

Day 12:
    - Start 2024-12-25 10:56pm
    - part1: 2024-12-27 5:05pm [1434856, 482.5ms] (53351)
    - part2: 2025-1-18 7:51pm [891106, 430.474ms] (44652), took a while to think about it, and
      this first version is quite bad.

Day 13:
    - Start 2024-12-27 5:54pm
    - part1: 2024-12-17 6:33pm [36838, 2.08ms] (49367)
    - part2: 2024-12-17 6:38pm [83029436920891, 2.144ms] (44118)

Day 14:
    - Start 2024-12-27 7:04pm
    - part1: 2024-12-27 8:13pm [226179492, 1.34ms] (46814)
    - part2: 2024-12-27 9:47pm [7502, 536.37ms ] (42021), this one I did by hand at first,
      no idea how to do it programmatically until I looked for ideas on reddit.

Day 15:
    - Start 2024-12-30 4:25pm
    - part1: 2024-12-30 9:21pm [1495147, 28.801ms] (42470)
    - part2:

Day 16:
    - Start 2025-1-5 6:25pm
    - part1: 2025-1-5 7:03pm [104516, 31.96ms] (35136)
    - part2:

Day 17:
    - Start 2024-12-31 5:08pm
    - part1: 2024-12-31 5:53pm [7,5,4,3,4,5,3,4,6, 27.8us] (35335)
    - part2: 2025-1-1 12:38pm [164278899142333, 66.8us] (25467), took a while to figure out
      the strategy to use, and then a while to debug why I wasn't finding an answer, thanks
      to exclusive endpoints on ranges.

Day 18:
    - Start 2025-1-1 8:15pm
    - part1: 2025-1-4 12:57pm [340, 14.7ms] (32127)
    - part2: 2025-1-4 1:40pm [34,32, 384.3ms] (31406), slow initial algorithm, improved by starting
      later based on part 1.

Day 19:
    - Start 2025-1-4 5:00pm
    - part1: 2025-1-5 12:23pm [228, 7.92ms] (31820)
    - part2: 2025-1-5 2:00pm [584553405070389, 68.99ms] (29006), naive counting algorithm at first didn't
      finish, but came up with some memoization algorithm.

Day 20:
    - Start 2025-1-14 8:13pm
    - part1: 2025-1-14 9:29pm [1381, 17.778ms] (28290)
    - part2:

Day 21:
    - Start 2025-1-5 3:36pm
    - part1:
    - part2:

Day 22:
    - Start 2025-1-6 9:02pm
    - part1: 2025-1-6 9:14pm [18317943467, 32.28ms] (26440)
    - part2: 2025-1-17 10:32 [2018, 756.97ms] (23564), this one was very difficult. I had an algorithm that almost
      worked, but I spent a long time debugging why it didn't work before realizing what went wrong after
      comparing with answers on reddit. Made some improvements by using a vector instead of hash tables.

Day 23:
    - Start 2025-1-20 7:07pm
    - part1: 2025-1-20 7:46pm [1200, 74.305ms] (25862)
    - part2:

Day 24:
    - Start
    - part1:
    - part2:

Day 25:
    - Start
    - part1:
    - part2:
